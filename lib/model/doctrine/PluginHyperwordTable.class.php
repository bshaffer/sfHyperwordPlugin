<?php
/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class PluginHyperwordTable extends Doctrine_Table
{
	public function createQuery($alias = '')
	{
		//By default, collection is ordered by length descending.  This prevents word overlap
		// ex: 'my word' will match before 'word'.  More "specific" Hyperwords match first
		$q = parent::createQuery($alias);
		$q->select('*, LENGTH(name) as length')->orderBy('length DESC');
		return $q;
	}
	public function createForObject($object, $words)
	{
		$words = is_array($words) ? $words : array($words);
		foreach ($words as $word) 
		{
			$new = new Hyperword;
			$new->setName($word);
			$new->setObjectId($object->getId());
			$new->setObjectClass(get_class($object));
			$new->save();
		}
	}
	public function removeForObject($object, $words = array())
	{
		$q = Doctrine_Query::create()->delete('Hyperword');
								// ->andwhere('object_id = ?', $object->getId())
								// ->andWhere('object_class = ?', get_class($object));
		if($words)
		{
			$q->whereIn('name', $words);
			$q->execute();	
		}			
	}
	public function findForObject($object)
	{
		return $this->createQuery()
								->where('object_id = ?', $object->getId())
								->andWhere('object_class = ?', get_class($object))
								->execute();	
	}
	public function findForObjectAsArray($object)
	{
		return $this->collectionToArray($this->findForObject($object));
	}
	public function collectionToArray($collection)
	{
		$arr = array();
		foreach ($collection as $hyperword) 
		{
			$arr[] = $hyperword->getName();
		}
		return $arr;
	}
}